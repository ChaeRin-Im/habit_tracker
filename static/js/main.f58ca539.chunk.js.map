{"version":3,"sources":["components/simpleHabit.jsx","index.js"],"names":["SimpleHabit","props","useState","count","setCount","spanRef","useRef","handleIncrement","useCallback","useEffect","console","log","className","ref","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA2BeA,EAzBK,SAAAC,GAChB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAUC,mBAGVC,EAAkBC,uBAAY,WAChCJ,EAASD,EAAQ,MAQrB,OAJAM,qBAAU,WACNC,QAAQC,IAAR,8BAAmCR,MACpC,CAACA,IAGA,qBAAIS,UAAU,QAAd,UACI,sBAAMC,IAAKR,EAASO,UAAU,aAA9B,qBACA,sBAAMA,UAAU,cAAhB,SAA+BT,IAC/B,wBAAQS,UAAU,8BAA8BE,QAASP,EAAzD,SACI,mBAAGK,UAAU,6BCf7BG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.f58ca539.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nconst SimpleHabit = props => {\r\n    const [count, setCount] = useState(0);\r\n    const spanRef = useRef();\r\n\r\n    //useCallback: 함수를 캐시에 저장\r\n    const handleIncrement = useCallback(() => {\r\n        setCount(count + 1);\r\n    });\r\n\r\n    //두번째 인자의 값이 변경될 때 호출이 됨.\r\n    useEffect(() => {\r\n        console.log(`mounted & updated!: ${count}`);\r\n    }, [count]);\r\n\r\n    return (\r\n        <li className=\"habit\">\r\n            <span ref={spanRef} className=\"habit-name\">Reading</span>\r\n            <span className=\"habit-count\">{count}</span>\r\n            <button className=\"habit-button habit-increase\" onClick={handleIncrement}>\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default SimpleHabit;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleHabit/>\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}